<?php

namespace App\Services;

use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Http;

use Twilio\Rest\Client;

class TwilioService
{
    private $accountSid;
    private $authToken;
    private $phoneNumber;
    private $whatsappNumber;
    private $baseUrl;

    public function __construct()
    {
        $this->accountSid = config('sms.twilio.sid');
        $this->authToken = config('sms.twilio.token');
        $this->phoneNumber = config('sms.twilio.phone_number');
        $this->whatsappNumber = config('sms.twilio.whatsapp_number');
        $this->baseUrl = "https://api.twilio.com/2010-04-01/Accounts/{$this->accountSid}";

        if (!$this->accountSid || !$this->authToken) {
            throw new \Exception('Twilio credentials not configured');
        }
    }

    /**
     * Send SMS message via Twilio REST API
     */
    public function sendSms(string $to, string $message): array
    {
        try {
            // Ensure phone number has country code
            if (!str_starts_with($to, '+')) {
                $to = '+' . $to;
            }

            $response = Http::asForm()
                ->withBasicAuth($this->accountSid, $this->authToken)
                ->withOptions(['verify' => false]) // Disable SSL verification for development
                ->post("{$this->baseUrl}/Messages.json", [
                    'From' => $this->phoneNumber,
                    'To' => $to,
                    'Body' => $message
                ]);

            if ($response->successful()) {
                $data = $response->json();

                Log::info('SMS sent successfully via Twilio', [
                    'to' => $to,
                    'message_sid' => $data['sid'],
                    'status' => $data['status']
                ]);

                return [
                    'success' => true,
                    'message_id' => $data['sid'],
                    'status' => $data['status'],
                    'response' => $data
                ];
            } else {
                $error = $response->json();
                Log::error('Twilio SMS failed', [
                    'to' => $to,
                    'error' => $error['message'] ?? 'Unknown error',
                    'code' => $error['code'] ?? $response->status()
                ]);

                return [
                    'success' => false,
                    'error' => $error['message'] ?? 'SMS failed',
                    'code' => $error['code'] ?? $response->status()
                ];
            }
        } catch (\Exception $e) {
            Log::error('Twilio SMS exception', [
                'to' => $to,
                'error' => $e->getMessage()
            ]);

            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    /**
     * Send WhatsApp message via Twilio REST API
     */
    public function sendWhatsApp(string $to, string $message): array
    {
        try {
            // Format WhatsApp number
            if (!str_starts_with($to, 'whatsapp:')) {
                if (!str_starts_with($to, '+')) {
                    $to = '+' . $to;
                }
                $to = 'whatsapp:' . $to;
            }

            $response = Http::asForm()
                ->withBasicAuth($this->accountSid, $this->authToken)
                ->withOptions(['verify' => false]) // Disable SSL verification for development
                ->post("{$this->baseUrl}/Messages.json", [
                    'From' => $this->whatsappNumber,
                    'To' => $to,
                    'Body' => $message
                ]);

            if ($response->successful()) {
                $data = $response->json();

                Log::info('WhatsApp message sent successfully via Twilio', [
                    'to' => $to,
                    'message_sid' => $data['sid'],
                    'status' => $data['status']
                ]);

                return [
                    'success' => true,
                    'message_id' => $data['sid'],
                    'status' => $data['status'],
                    'response' => $data
                ];
            } else {
                $error = $response->json();
                Log::error('Twilio WhatsApp failed', [
                    'to' => $to,
                    'error' => $error['message'] ?? 'Unknown error',
                    'code' => $error['code'] ?? $response->status()
                ]);

                return [
                    'success' => false,
                    'error' => $error['message'] ?? 'WhatsApp message failed',
                    'code' => $error['code'] ?? $response->status()
                ];
            }
        } catch (\Exception $e) {
            Log::error('Twilio WhatsApp exception', [
                'to' => $to,
                'error' => $e->getMessage()
            ]);

            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    /**
     * Send OTP via SMS
     */
    public function sendOtpSms(string $phoneNumber, string $otpCode, int $expiryMinutes = 5): array
    {
        $message = "Your verification code is: {$otpCode}. This code will expire in {$expiryMinutes} minutes. Please do not share this code with anyone.";

        return $this->sendSms($phoneNumber, $message);
    }

    /**
     * Send OTP via WhatsApp
     */
    public function sendOtpWhatsApp(string $phoneNumber, string $otpCode, int $expiryMinutes = 5): array
    {
        $message = "🔐 Your verification code is: *{$otpCode}*\n\nThis code will expire in {$expiryMinutes} minutes.\n\nPlease do not share this code with anyone.";

        return $this->sendWhatsApp($phoneNumber, $message);
    }

    /**
     * Test Twilio configuration
     */
    public function testConfiguration(): array
    {
        try {
            $response = Http::withBasicAuth($this->accountSid, $this->authToken)
                ->withOptions(['verify' => false]) // Disable SSL verification for development
                ->get("{$this->baseUrl}.json");

            if ($response->successful()) {
                $data = $response->json();
                return [
                    'success' => true,
                    'account_sid' => $data['sid'],
                    'friendly_name' => $data['friendly_name'],
                    'status' => $data['status']
                ];
            } else {
                return [
                    'success' => false,
                    'error' => 'Failed to authenticate with Twilio'
                ];
            }
        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }
}
